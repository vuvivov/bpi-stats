#pragma once
#include<list>
#include<string>
#include<ostream>


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///An abstract class responsible for output of statistics.
///Derived classes would output the statistics with different layouts.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class printer
{
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///Print data into an output stream
	///@param _input: a list with each element representing one statistic; each statistic has a list of results; each result is pair of attribute name and value
	///@param _output: an reference to an std::ostream object taking the output
	///@return: none
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void print(std::list<std::list<std::array<std::string, 2>>> _input,std::ostream& _output)=0;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///A printer with simple line-separated layout
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class basicPrinter : public printer
{
public:
	virtual void print(std::list<std::list<std::array<std::string, 2>>> _input, std::ostream& _output) override;
};