#pragma once
#include<string>
#include<vector>
#include<utility>
#include<map>
#include <boost/date_time/gregorian/gregorian.hpp>

using pricePoint = std::pair<boost::gregorian::date, double>;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///Abstract class for price data. 
///Classes can be derived to satisfy special needs such as fast lookup of special price/date pattern for certain statistics.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class priceDatabase
{
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///Push a date-price pair into the database
	///@param _in: input data
	///@return: none
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void push(pricePoint _in)=0;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///Get all data in the database
	///@return: a vector of date-price pairs
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual std::vector<pricePoint> getAll() = 0;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///Basic class for storing price data using map with date as key and price as value.
///The aim is to maintain the ordinary structure of raw data for simplicity and versatility.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class priceDatabaseMap : public priceDatabase
{
protected:
	std::map<boost::gregorian::date, double> m_data;///<date-price map storing price data internally
public:
	virtual void push(pricePoint _in) override;///<if there are price points with duplicated dates, only the first occurred is being pushed
	virtual std::vector<pricePoint> getAll()override;///<returned data is sorted by date
};