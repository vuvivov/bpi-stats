#pragma once
#include<string>
#include<list>
#include<memory>
#include<stdexcept>
#include "priceDatabase.h"


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///An abstract class that retrieves price data from various sources (e.g. string, file or web) and parse them into a ready-to-use format.
///Derived classes need to specify formats related to raw data for processing.  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class dataRetriever
{
protected:
	std::string m_rawData;///<string that stores raw data retrieved and ready for processing

public:
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///Retrieve and process data from a string
	///@param _source: raw data as a string
	///@param _target: pointer to where the process data will be saved
	///@return: if successful
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool retrieveFromString(std::string _source, std::shared_ptr<priceDatabase> _target);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///Retrieve and process data from a file
	///@param _fileName: name of the file containing raw data
	///@param _target: pointer to where the process data will be saved
	///@return: if successful
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool retrieveFromFile(std::string _fileName, std::shared_ptr<priceDatabase> _target);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///Retrieve and process data from the web
	///@param _start: start date of time span of interest
	///@param _end: end date of time span of interest
	///@param _target: pointer to where the process data will be saved
	///@return: if successful
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool retrieveFromWeb(boost::gregorian::date _start, boost::gregorian::date _end,std::shared_ptr<priceDatabase> _target);
	
private:
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///Parse internally saved raw data into ready-to-use format. 
	///Overriding according to different raw data formats.
	///@param _target: pointer to where the process data will be saved
	///@return: if successful
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool parse(std::shared_ptr<priceDatabase> _target)const =0;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///Generate URL for retrieving raw data if possible
	///@param _start: start date of time span of interest
	///@param _end: end date of time span of interest
	///@return: URL
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual std::string getURL(boost::gregorian::date _start, boost::gregorian::date _end)const =0;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///Special dataRetriever dealing with data from coindesk
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class coinDeskDataRetriever final: public dataRetriever
{
private:
	virtual bool parse(std::shared_ptr<priceDatabase> _target)const override;
	virtual std::string getURL(boost::gregorian::date _start, boost::gregorian::date _end)const override;
};